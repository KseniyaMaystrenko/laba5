# Генератор простых чисел. Просуммируйте возвращаемые числа.
# К генератору должна быть применена хотя бы одна из функций map, reduce, filter

from functools import reduce  # Подключаем функцию reduce из модуля functools
import random  # Подключаем модуль генерации чисел
import sympy  # Подключаем математический модуль, для проверки простых чисел


def generate_random_prime(z):  # Функция создания простых чисел
    a = int(input('Введите начальный диапазон: '))
    b = int(input('Введите конечный диапазон: '))
    for _ in range(z): # Генерируем простые числа столько раз, сколько запросил пользователь
        while True:  # Будем генерировать число бесконечно, пока оно не будет простым
            num = random.randint(a, b)  # Генерируем число в диапазоне a..b
            if sympy.isprime(num):  # Если число оказалось простым
                yield num  # Возвращаем его в список
                break # Выходим из бесконечного While, чтобы перейти к следующей ячейке списка


q = int(input('Введите сколько значений сгенерировать: '))
kape=(list(generate_random_prime(q))) # Создаём с помощью генератора список, каждое число генерируется функцией и возвращается с помощью yield
total_sum = reduce(lambda x, y: x + y,
                   kape)  # Вычисление суммы всех элементов списка при помощи reduce() и lambda-функции:
print(kape)  # Выводим сгенерированный список на экран
print('Сумма всех чисел списка:', total_sum)  # Выводим сумму элементов списка на экран
